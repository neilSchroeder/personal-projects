[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tango-game"
version = "1.0.0"
description = "A Python implementation of the Tango puzzle game from LinkedIn"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Neil Schroeder", email = "neilSchroeder@example.com"}
]
keywords = ["game", "puzzle", "tango", "gui", "tkinter"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Games/Entertainment :: Puzzle Games",
    "Operating System :: OS Independent",
]
requires-python = ">=3.12"
dependencies = [
    "pygame>=2.5.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[project.scripts]
tango = "src.launcher:main"
tango-game = "src.tango_game:main"
tango-test = "src.test_tango:main"

[project.urls]
Homepage = "https://github.com/neilSchroeder/personal-projects"
Repository = "https://github.com/neilSchroeder/personal-projects"
Issues = "https://github.com/neilSchroeder/personal-projects/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "src/test_*.py",
    "src/*_test.py",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
